import math

# Sample game tree as a nested list (leaf values)
game_tree = [
    [3, 5, 6],
    [9, 1, 2],
    [-1, 4],
    [0]
]

def minimax(node, depth, is_maximizing, alpha, beta):
    if isinstance(node, int):
        return node

    if is_maximizing:
        max_eval = -math.inf
        for child in node:
            eval = minimax(child, depth + 1, False, alpha, beta)
            max_eval = max(max_eval, eval)
            alpha = max(alpha, eval)
            if beta <= alpha:
                print(f"Pruning at depth {depth} (maximizer)")
                break  # Alpha-beta pruning
        return max_eval
    else:
        min_eval = math.inf
        for child in node:
            eval = minimax(child, depth + 1, True, alpha, beta)
            min_eval = min(min_eval, eval)
            beta = min(beta, eval)
            if beta <= alpha:
                print(f"Pruning at depth {depth} (minimizer)")
                break  # Alpha-beta pruning
        return min_eval

if __name__ == "__main__":
    best_value = minimax(game_tree, 0, True, -math.inf, math.inf)
    print(f"\nBest value (with pruning): {best_value}")
