neighbors = {
    'WA': ['NT', 'SA'],
    'NT': ['WA', 'SA', 'Q'],
    'SA': ['WA', 'NT', 'Q', 'NSW', 'V'],
    'Q': ['NT', 'SA', 'NSW'],
    'NSW': ['Q', 'SA', 'V'],
    'V': ['SA', 'NSW', 'T'],
    'T': ['V']
}
colors = ['Red', 'Green', 'Blue']
assignment = {}
def is_valid(region, color):
    for neighbor in neighbors[region]:
        if neighbor in assignment and assignment[neighbor] == color:
            return False
    return True
def backtrack():
    if len(assignment) == len(neighbors):
        return assignment
    unassigned = [region for region in neighbors if region not in assignment][0]

    for color in colors:
        if is_valid(unassigned, color):
            assignment[unassigned] = color
            result = backtrack()
            if result:
                return result
            del assignment[unassigned]

    return None
solution = backtrack()
if solution:
    print("Map Coloring Solution:")
    for region in sorted(solution):
        print(f"{region}: {solution[region]}")
else:
    print("No solution found.")
