from collections import deque
def water_jug_bfs(jug1_capacity, jug2_capacity, target):
    visited = set()
    queue = deque()
    queue.append((0, 0))
    while queue:
        jug1, jug2 = queue.popleft()
        if (jug1, jug2) in visited:
            continue
        visited.add((jug1, jug2))

        print(f"Visited: Jug1 = {jug1}, Jug2 = {jug2}")
        if jug1 == target or jug2 == target or jug1 + jug2 == target:
            print("Solution found!")
            return True
        possible_states = set()
        possible_states.add((jug1_capacity, jug2))
        possible_states.add((jug1, jug2_capacity))
        possible_states.add((0, jug2))
        possible_states.add((jug1, 0))
        transfer = min(jug1, jug2_capacity - jug2)
        possible_states.add((jug1 - transfer, jug2 + transfer))
        transfer = min(jug2, jug1_capacity - jug1)
        possible_states.add((jug1 + transfer, jug2 - transfer))

        for state in possible_states:
            if state not in visited:
                queue.append(state)
    
    print("No solution.")
    return False
